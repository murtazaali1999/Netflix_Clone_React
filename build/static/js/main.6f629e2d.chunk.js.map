{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","require","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","axios","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","original_name","overview","lenght","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f629e2d.chunk.js","sourcesContent":["const axios = require('axios');\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/w1280\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    //this use effect will run when movies state change\r\n\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    //if any outside variable is used from outside the useEffect like\r\n    //fetchURL we have to use\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  //this makes fetchURL a dependency\r\n\r\n  const handleClick = (movie)=>{\r\n    if(trailerUrl){ //if already a trailer url is present then empty it\r\n      setTrailerUrl('');\r\n    }else{\r\n      movieTrailer(movie?.name||\"\").then(url=>{\r\n        const urlParams =new URLSearchParams(new URL(url).search);\r\n        setTrailerUrl(urlParams.get('v'));\r\n      })\r\n      .catch((error)=>{\r\n        console.log(error);\r\n      })\r\n    }\r\n  }\r\n \r\n\r\n\r\n  const opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n      autoplay:1,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className='row'>\r\n      <h2>{title}</h2>\r\n      <div className='row__posters'>\r\n        {movies.map((movie) => (\r\n          <img\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            key={movie.id}\r\n            onClick={()=>handleClick(movie)}\r\n            src={`${baseURL}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;","const API_KEY = \"8df90bc09867a6f4b0e380c6fe851c02\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/w1280\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchTrending);\r\n      setMovies(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(str,n){\r\n      return str?.lenght > n ? str.substr(0,n-1)+\"...\":str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(${baseURL}${movie.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className='banner__contents'>\r\n        <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n        <div className='banner__buttons'>\r\n          <button className='banner__button'>Play</button>\r\n          <button className='banner__button'>My List</button>\r\n        </div>\r\n        <h1 className='banner__description'>{truncate(movie?.overview,150)}</h1>\r\n      </div>\r\n      <div className=\"banner__fadebottom\"/>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className='nav__logo'\r\n        src='https://www.freepnglogos.com/uploads/netflix-logo-circle-png-5.png'\r\n        alt='NETFLIX LOGO'\r\n      />\r\n      <img\r\n        className='nav__avatar'\r\n        src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\r\n        alt='User Logo'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport requests from \"./requests\";\nimport Nav from \"./Nav\";\n//use Capital first Letter if component\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Nav />\n      <Banner />\n      <Row\n        title='NETFLIX ORIGINALS'\n        isLargeRow\n        fetchUrl={requests.fetchNetflixOriginals}\n      ></Row>\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending}></Row>\n      <Row\n        title='Netflix Originals'\n        fetchUrl={requests.fetchNetflixOriginals}\n      ></Row>\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated}></Row>\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies}></Row>\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies}></Row>\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies}></Row>\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies}></Row>\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries}></Row>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}